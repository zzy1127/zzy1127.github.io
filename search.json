[{"title":"Java从入门到入土","url":"/2022/05/13/Java%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/","content":"<h2 id=\"基本特征\"><a href=\"#基本特征\" class=\"headerlink\" title=\"基本特征\"></a>基本特征</h2><ul>\n<li><p>Java核心机制：JVM虚拟机、代码安全性检测、垃圾回收</p>\n</li>\n<li><p>JDK&#x3D;JRE(JVM+API)+Tools</p>\n</li>\n<li><p>面向对象:继承、封装、多态</p>\n</li>\n<li><p>程序分类：Applet(嵌入网页)、Application</p>\n</li>\n<li><p>Tools: javac编译 java运行 jar打包 javadoc生成文档 javap反汇编</p>\n<h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2></li>\n</ul>\n<h3 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h3><p>1.使用Scanner类输入</p>\n<pre><code>先创建Scanner类对象\n</code></pre>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scan</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str_1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str_2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num_1</span> <span class=\"operator\">=</span> scan.nextInt();<span class=\"comment\">//输入整数</span></span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">num_2</span> <span class=\"operator\">=</span> scan.nextFloat();<span class=\"comment\">//输入浮点数</span></span><br><span class=\"line\">        str_1 = scan.nextLine();<span class=\"comment\">//输入字符串，可包含空格</span></span><br><span class=\"line\">        str_2 = scan.next();<span class=\"comment\">//输入字符串，不包含空格</span></span><br><span class=\"line\">        scan.close();<span class=\"comment\">//关闭输入流 一旦关闭则无法再读入</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>2.使用BufferedReader类输入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> num_1;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str_1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>();</span><br><span class=\"line\">        <span class=\"type\">BufferedReader</span> <span class=\"variable\">bf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(System.in));</span><br><span class=\"line\">        <span class=\"comment\">//可能会有异常 要用try-catch</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            str_1 = bf.readLine();<span class=\"comment\">//读取一行字符串</span></span><br><span class=\"line\">            num_1 = bf.read();<span class=\"comment\">//读取单个字符并返回随对应的ASCII码</span></span><br><span class=\"line\">            bf.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>3.输出 使用<code>System.out</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;hello world&quot;</span>);<span class=\"comment\">//换行输出</span></span><br><span class=\"line\">    System.out.print(<span class=\"string\">&quot;hello world&quot;</span>);<span class=\"comment\">//不换行输出</span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;%.2f&quot;</span>, <span class=\"number\">3.14</span>);<span class=\"comment\">//格式化输出</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据、运算、流程控制\"><a href=\"#数据、运算、流程控制\" class=\"headerlink\" title=\"数据、运算、流程控制\"></a>数据、运算、流程控制</h3><ul>\n<li>数组</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> [] a = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[size];<span class=\"comment\">//一维</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> [][] a = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">3</span>][];<span class=\"comment\">//二维</span></span><br><span class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[size];</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>break和continue</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">label: <span class=\"keyword\">while</span>()&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">break</span>/<span class=\"keyword\">continue</span> label;<span class=\"comment\">//可以加参数跳转到指定标签</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>&gt;&gt;</code>带符号右移位  <code>&gt;&gt;&gt;</code>无符号右移位</p>\n</li>\n<li><p><code>&amp; ｜</code>可以表示逻辑运算 <code>&amp;&amp; ||</code>表示短路逻辑运算（第一个成立则不判断第二个）</p>\n</li>\n<li><p>JAVA中字符采用Unicode编码，占两个字节</p>\n</li>\n</ul>\n<h3 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h3><ul>\n<li>封装、继承、多态</li>\n</ul>\n<h4 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">public</span>][<span class=\"keyword\">abstract</span>|<span class=\"keyword\">final</span>] <span class=\"keyword\">class</span> <span class=\"title class_\">className</span> [<span class=\"keyword\">extends</span> <span class=\"title class_\">superClassName</span>] [<span class=\"keyword\">implements</span> <span class=\"title class_\">InterfaceNameList</span>]&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"keyword\">public</span>|<span class=\"keyword\">protected</span>|<span class=\"keyword\">private</span>] [<span class=\"keyword\">static</span>] [<span class=\"keyword\">final</span>] [<span class=\"keyword\">transient</span>] [<span class=\"keyword\">volatile</span>] type variableName;<span class=\"comment\">//字段定义</span></span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"keyword\">public</span>|<span class=\"keyword\">protected</span>|<span class=\"keyword\">private</span>] [<span class=\"keyword\">static</span>] [<span class=\"keyword\">final</span>|<span class=\"keyword\">abstract</span>] [<span class=\"keyword\">native</span>] [<span class=\"keyword\">synchronized</span>] </span><br><span class=\"line\">    returnType <span class=\"title function_\">methodName</span><span class=\"params\">([paramList])</span><span class=\"comment\">//方法定义</span></span><br><span class=\"line\">    [<span class=\"keyword\">throws</span> exceptionList]&#123;</span><br><span class=\"line\">        statements</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>访问控制符</li>\n</ul>\n<p>类定义不加<code>public</code>则只能被同包中的访问</p>\n<p>成员变量</p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/byw8n3g0.png\"></p>\n<ul>\n<li>其他修饰符</li>\n</ul>\n<p><code>static</code>表示类本身具有的字段&#x2F;方法，不局限于某个实例</p>\n<p><code>static</code>方法中不能使用<code>this</code>、<code>super</code></p>\n<p><code>final</code>类不可以被继承 字段不可以被修改 方法不可以被重写</p>\n<p><code>static final=const</code></p>\n<p><code>abstract</code>抽象类不能实例化，只能被<code>extends </code>方法只能定义（用;不用{}）然后被子类重写</p>\n<ul>\n<li>继承</li>\n</ul>\n<p>只能<code>extends</code>一个父类，可用<code>super</code>代指</p>\n<p><code>this super</code>作构造函数时要放在第一行</p>\n<p>子类可以@override 重写父类方法</p>\n<ul>\n<li>实现接口</li>\n</ul>\n<p><code>implements</code> 可以实现多个接口</p>\n<h4 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">public</span>] <span class=\"keyword\">interface</span> <span class=\"title class_\">InterfaceName</span> [<span class=\"keyword\">extends</span> <span class=\"title class_\">superInterfaceList</span>]&#123;</span><br><span class=\"line\">    <span class=\"type\">type</span> <span class=\"variable\">constantName</span> <span class=\"operator\">=</span> Value;<span class=\"comment\">//常量声明 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    returnType <span class=\"title function_\">methodName</span><span class=\"params\">([paramList])</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><p>接口支持多继承，可以有多个接口为父类</p>\n</li>\n<li><p>接口中的字段为常量，可以被实现它的多个类使用，性质为<code>public static final</code></p>\n</li>\n<li><p>接口中的方法均为<code>public abstract</code></p>\n</li>\n</ul>\n<h4 id=\"枚举类\"><a href=\"#枚举类\" class=\"headerlink\" title=\"枚举类\"></a>枚举类</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Light</span>&#123;red, yellow, green&#125;<span class=\"comment\">//定义</span></span><br><span class=\"line\"><span class=\"type\">Light</span> <span class=\"variable\">light</span> <span class=\"operator\">=</span> Light.red;</span><br><span class=\"line\"><span class=\"keyword\">switch</span>(light)&#123;<span class=\"keyword\">case</span> red:... <span class=\"keyword\">break</span>;&#125;</span><br></pre></td></tr></table></figure>","categories":["语言"],"tags":["Java"]}]